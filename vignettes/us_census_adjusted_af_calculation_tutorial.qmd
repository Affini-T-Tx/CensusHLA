---
title: "US-Census Adjusted HA Frequency Calculation Example"
author: "Christian Roy"
abstract: "A detailed walk-through of how we're adjusting nmdp frequencies using US Census Data"
date: "`r Sys.Date()`"
#output: rmarkdown::html_vignette
format:
  html:
    df-print: paged
    toc: true
    toc_float:
      collapsed: false
      smooth_scroll: false
    theme: cosmo
    highlight: tango
    self-contained: true
    embed-resources: true
    page-layout: full
    citations-hover: true
    code-fold: true
    code-summary: "Show the code"
  pdf:
    toc: true
    number-sections: true
    highlight-style: github
    documentclass: scrartcl
    code-overflow: wrap
    papersize: letter
    colorlinks: true
  docx:
    toc: true
    number-sections: true
    highlight-style: github
execute:
    echo: true
    warning: false
    message: false
    code-overflow: wrap
    code-line-numbers: true
bibliography: references.bib
csl: cell.csl
# vignette: >
#   %\VignetteIndexEntry{US-Census Adjusted HA Frequency Calculation Example}
#   %\VignetteEngine{knitr::rmarkdown}
#   %\VignetteEncoding{UTF-8}
---

```{r setup}
library(tidyverse)
library(CensusHLA)
library(citr)
```

Here we're going to write a detailed example of how we arrive at our US-Census adjusted HLA Frequencies.

# Procedure Overview

-   Follow A\*11:01 in API Broad Race Code as an example
-   Describe Import the US Census frequencies
-   Show HLA Frequencies for A\*11:01 across the races
-   Show US Census 2020 values
-   Show how we adjust individual race-matched HLA Frequencies according to their US-census frequencies

# HLA Frequencies from nmdp (nmdp)

For United States HLA frequency estimations, we use *Allelic* Frequencies from [nmdp](https://bioinformatics.nmdpclinical.org/) (`nmdp_af`), for 5 races *for which we also have US-Census estimates*. nmdp measured allelic frequencies from these 'Broad Race Codes', and we have US-Census data for those races. The `nmdp_race_code`s are:

| nmdp Broad Race Code |        Description        |
|:--------------------------:|:-------------------------:|
|           `AFA`            |     African American      |
|           `API`            | Asian or Pacific Islander |
|           `CAU`            |         Caucasian         |
|           `HIS`            |         Hispanic          |
|           `NAM`            |      Native American      |

These are described in [@gragertSixlocusHighResolution2013a], and the HLA frequencies themselves are presented in the supplemental data. However, their format is not very approachable, so nmdp also provides them to the public via their website [located HERE](https://frequency.nmdp.org/jsp/haploTypeFrequencies.jsp). Below is a screenshot of what the relevant part of the page looks like:

![](img/nmdp_hla_freq_webpage.png){width="312"}

These were downloaded, and imported into the `CensusHLA` analysis package according to the code shown in `data-raw/import_nmdp_data.R` are are available as package-included data sets via for example `nmdp_hla_frequencies_by_race`.

## HLA A\*11:01 Example from nmdp by Broad RaceCode

Here's an example from our nmdp stored data for A\*11:01 by broad race code

```{r}
nmdp_hla_frequencies_by_race |> 
  dplyr::filter(loci == 'A') |> 
  dplyr::filter(allele == 'A*11:01') |> 
  dplyr::filter(nmdp_race_code %in% c("HIS","NAM","API","AFA","CAU","UNK"))  |> 
  dplyr::select(allele,nmdp_race_code,nmdp_af,nmdp_calc_gf) |> 
  #knitr::kable(digits = 2) |> 
  flextable::flextable() |> 
      # Rename columns for display
  flextable::set_header_labels(
    values = list(
    allele = "Allele", 
    nmdp_race_code = "nmdp Race Code",
    nmdp_af = "nmdp Allelic Freq",
    nmdp_calc_gf = "nmdp Calculated Genotypic Freq"
    )) |> 
  flextable::colformat_double(digits = 3,j = c("nmdp_af","nmdp_calc_gf"))
```

So we can see that the Allelic frequency for `API` is `0.17575598` - or \~`17.6%` of individuals identifying as Asian or Pacific Islanders. The other column `nmdp_calc_gf` stands for *nmdp Calculated Genotypic Frequency*. It is marked calculated because *it is not measured*, but calculated from the allelic frequency via the formula `(1 - (1 - nmdp_af) ^ 2))`- which is a Hardy-Weinberg formula to estimate/calculate genotypic frequencies (the number of *individuals* in a population who harbor a copy of the allele).

# US Census Data Import

The import of the US Census is described in `data-raw/import_us_census.R` and can be summarized as the following steps:

-   Use the US-Census API to connect to [Decentenial (2020) Census table P2](https://data.census.gov/cedsci/table?q=United%20States&t=Race%20and%20Ethnicity&tid=DECENNIALPL2020.P2) [@US2020Census]
    -   We used the `censusapi`[@censusapi] R package for programmatic access to download table data.
-   Do the steps below Per `nmdp_race_code` ('Broad nmdp Race code')
    -   For individuals identifying as a single race, keep track of that value as `total_single_race_pop`
    -   For individuals identifying as multiple races, make a running total in a value called `total_multiple_race_pop`
    -   if a person identifies as 'API' and 'CAU', assign 0.5 to a running total for CAU and API each
    -   Also do this for individuals identifying as 3,4, and 5 races.
        -   3 races is 1/3 each, 4 races is 1/4 each, etc.
    -   Create a column called `total_2020_pop` which is the sum of `total_single_race_pop` and `total_multiple_race_pop`
-   Based on the total population of the US, provide a percentage of individuals in the US identifying as that race

Here's a peak at the included data table in this analysis package. In this example we're excluding individuals who mark 'Unknown' for their race.

```{r}
us_pop_multirace_adjusted_in_nmdp_codes_by_region(in_region = 'us') |>
  dplyr::mutate(us_2020_percent_pop = total_2020_pop / sum(total_2020_pop)) |> 
  dplyr::filter(nmdp_race_code != 'UNK') |> 
  dplyr::select(-census_region) |> 
  #knitr::kable(digits = 2) |> 
  flextable::flextable() |> 
      # Rename columns for display
  flextable::set_header_labels(
    values = list(
    region = "Region", 
    nmdp_race_code = "nmdp Race Code",
    total_single_race_pop = "Total single race reporting persons",
    total_multiple_race_pop = "Total multi race reporting persons",
    total_2020_pop = "Total 2020 Population",
    us_2020_percent_pop = "US 2020 Population Percentage"
    )) |> 
  flextable::colformat_double(digits = 2,j = "us_2020_percent_pop") |> 
  flextable::width(j = c("total_single_race_pop", "total_multiple_race_pop","total_2020_pop"), width = c(1, 1,1))
```

A note here would be that the US 2020 census had a specific question for being of Hispanic decent and did not allow respondents to indicate that race for multiple-race self-identification.

# Adjusting nmdp Broad Race Allelic frequencies for US Census Frequency

Now that we have allelic frequencies, and US population numbers for the same Broad Race codes, we can adjust the HLA frequencies according to their US population frequency, a specific example is described below.

*NB* - Small changes in the live-values below may occur if the date is different from the last compiled date. The US Census Bereau updates the source data periodically and some of the functions call back on those data.

For `API`, we have `22,063,386` individuals selecting that as either their only, or a fraction of their mixed race identity. We have a total of `331,451,594` individuals in our account of the census. This differs slightly from the official number of `331,449,281`. This is a small difference, and likely due to how we accounted for individuals of mixed-race identification. We consider it close enough for our purposes here. We can calculate the percentage of US `API` individuals via `22063386 (API population) / 331451594 (total poplation)` which gives us `r 22063386 / 331451594` or 6.6% of the US population. It is this value that we will use to 'adjust' the nmdp HLA Frequency.

An example of functions used in this package that capture all of this is the below:

```{r}
obtain_census_adjusted_nmdp_hla_frequencies_by_region(in_region = 'us') |>
  dplyr::filter(allele == 'A*11:01') |> 
  dplyr::ungroup() |> 
  dplyr::select(-region, -loci, -is_g,-census_region) |>
  flextable::flextable() |>
    # Rename columns for display
  flextable::set_header_labels(
    values = list(
    allele = "Allele", 
    nmdp_race_code = "nmdp Race Code",
    nmdp_af = "nmdp Allelic Freq",
    nmdp_calc_gf = "nmdp Calculated Genotypic Freq",
    us_census_adjusted_af_by_race = "US Census Adjusted Allelic Freq",
    us_2020_percent_pop = "US 2020 Percent Pop",
    us_2020_nmdp_gf = "US 2020 nmdp Genotypic Freq"
    )) |> 
  flextable::colformat_double(
    digits = 3,
    j = c(
      "us_2020_percent_pop",
      "us_2020_nmdp_gf",
      "nmdp_af",
      "nmdp_calc_gf"
    )
  )
```

If we follow the `API` row, we can see that we have our `nmdp_af` value of `0.17575598`, and we've matched the `us_2020_percent_pop` as `0.06594684` or \~6.6%.

In order to 'roll up' our per race estimations to a whole US population level, we sum `nmdp_af` values which have been multiplied by their race-matched `us_2020_percent_pop`. That gives us a US-census adjusted allelic frequency. We then calculate the genotypic frequency from this US-census adjusted allelic frequency. All of this is described in `data-raw/adjust_nmdp_for_us_census.R`. After this we no longer account for `nmdp_race_codes` and are considering the whole US population. Here's an example input table:

```{r}
tmp <- 
  obtain_census_adjusted_nmdp_hla_frequencies_by_region(in_region = 'us') |> 
  dplyr::filter(allele == 'A*11:01') |> 
  dplyr::group_by(region,loci,allele) |>
  dplyr::mutate(us_census_adjusted_af_by_race = nmdp_af * us_2020_percent_pop)
tmp |>
  dplyr::ungroup() |> 
  dplyr::select(-region, -loci, -is_g, -census_region) |>
  flextable::flextable() |>
    # Rename columns for display
  flextable::set_header_labels(
    values = list(
    allele = "Allele", 
    nmdp_race_code = "nmdp Race Code",
    nmdp_af = "nmdp Allelic Freq",
    nmdp_calc_gf = "nmdp Calculated Genotypic Freq",
    us_census_adjusted_af_by_race = "US Census Adjusted Allelic Freq",
    us_2020_percent_pop = "US 2020 Percent Pop",
    us_2020_nmdp_gf = "US 2020 nmdp Genotypic Freq"
    )) |> 
  flextable::colformat_double(
    digits = 3,
    j = c(
      "us_2020_percent_pop",
      "us_2020_nmdp_gf",
      "nmdp_af",
      "nmdp_calc_gf",
      "us_census_adjusted_af_by_race"
    )
  )
```

We sum the last column (`us_census_adjusted_af_by_race`), to generate a new value, that we call `us_af`, and we use that allelic frequency to recalculate a genotypic frequency `us_calc_gf`. Here's an example;

```{r}
tmp |>   # Sum up the us-pop adjusted by race allele frequencies
  #This get's us the US-level af
  dplyr::summarize(us_af = sum(us_census_adjusted_af_by_race), .groups = "keep") |>
  #Now calculate the genotypic frequency from this new us-level and census adjusted af
  dplyr::mutate(us_calc_gf = (1 - (1 - us_af) ^ 2)) |>
  dplyr::arrange(desc(us_calc_gf)) |>
dplyr::ungroup()   |> 
  dplyr::select(-region,-loci) |> 
  flextable::flextable() |>
  # Rename columns for display
  flextable::set_header_labels(
    values = list(
    allele = "Allele", 
    us_af = "Allelic Freq",
    us_calc_gf = "US Genotypic Freq"
    )) |> 
  flextable::colformat_double(
    digits = 3,
    j = c(
      "us_af",
      "us_calc_gf"))
```

This is captured in the internal data object shown below. Again small differences are observed if using a 'live' versus 'snapshot' call on the US Census data, as they update the tables periodically.

```{r}
nmdp_hla_frequencies_us_2020_census_adjusted |> 
  dplyr::filter(allele == 'A*11:01') |>  
  dplyr::mutate(hla_source = 'Census Adjusted nmdp') |> 
  dplyr::ungroup() |> 
  dplyr::select(-region,-loci) |> 
  flextable::flextable() |>
    # Rename columns for display
  flextable::set_header_labels(
    values = list(
    allele = "Allele", 
    af = "Allelic Freq",
    calc_gf = "Calculated Genotypic Freq",
    hla_source = "HLA Data Source"
    )) |> 
  flextable::colformat_double(
    digits = 3,
    j = c(
      "af",
      "calc_gf"))
```

So here we can see that we moved from allelic frequencies measured within a race by nmdp and [@gragertSixlocusHighResolution2013a], and can now discuss US-level allelic and genotypic frequencies for any given allele. The example below shows that, for example, nmdp measured an allelic frequency of A\*11:01 range of 1.4% for African American population to 17.6% for Asian or Pacific Islanders. But when you account for the percent composition of the US population for those races (12.5% and 6.6%, respectively), and 3 others, you arrive at an overall allelic frequency of 5.8%, which gives a calculated genotypic frequency of 11.2%.

# Equations

## Terms definitions

When a census respondent identifies as multiple races, that person's fractional contribution to each running population total for the identified races is divided by the number of races. For example: if a person identifies as 1/2 API and 1/2 AFA, then the running total for API and AFA is incremented by 0.5 each. This is done for respondents identifying as many as 6 races in their identity.

The exception is for Hispanic identifying respondents, as the census only allowed that as a whole-number identification.

$$
\text{Per Race Total} = (\sum_{j\in\text{us race category}}^{m} 1) +  (\sum_{j\in\text{us race category}}^{l}\frac{1}{\text{Number of reported races}})
$$

Where ${j}$ is a specific reported race, and ${m}$ is the total number of such respondents identifying as that race alone and for multi-race respondents of race ${j}$, we add a fraction to a running total for each race where $l$ is the number of individuals with that reported race in their multi-race identity.

Races considered in this way are $\text{APA}$, $\text{AFA}$, $\text{CAU}$, and $\text{NAM}$. And again, the exception is $\text{HIS}$, which is a whole number count as the 20202 census did not allow for multi-race Hispanic identification. That leaves us with a final equation to determine the overall race-adjusted 2020 populations *per region* (Whole US, county, city, zip, etc) as:

$$
\text{2020 Pop Total per region} = (\sum_{j\in\text{us race category}}^{4}\text{Per Race Total}) + (\text{HIS, Total})
$$ With this total, we can determine the percent of individuals of a given race $r$ in a specific region as:

$$
p = \frac{r}{\text{2020 US Total per region}}
$$ And with this percentage per race, $p$, we can adjust the race-matched nmdp, $\text{r}$, Frequencies

$$
q = \text{nmdp's }r\text{ Frequency} \times p
$$ And we then sum those adjusted allelic frequencies, q, to get an overall allelic frequency in the region:

$$
\text{US region adjusted Allelic Frequency, AF} =  \sum_{j\in\text{us race category}}^{5} \text{q}
$$ Finally, we convert from Allelic Frequency to Genotypic frequency using Hardy-Weinberg

$$
\text{GF} = 1 - (1 - \text{AF}) ^ 2
$$ Where $GF$ equals Genotypic frequency and $AF$ equals Allelic Frequency

# References

::: {#refs}
:::

# Session and System Info

```{r}
#| label: System and Session Information
#| code-fold: true
#| warnings: false
#| message: false
#| code-overflow: wrap
#| code-line-numbers: true
devtools::session_info()
```
